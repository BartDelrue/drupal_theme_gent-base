<?php

/**
 * @file
 * Functions to support theming in the Gent Base theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function gent_base_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['gent_base'] = [
    '#type' => 'details',
    '#title' => t('Gent Base settings'),
    '#description' => t('All settings defined by the Gent Base styleguide.'),
    '#open' => TRUE,
  ];
}

/**
 * Implements hook_form_alter().
 */
function gent_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove button classes form delete action.
  if (isset($form['actions']['delete']['#attributes']['class'])) {
    foreach (['button', 'button--danger'] as $class) {
      if (($key = array_search($class, $form['actions']['delete']['#attributes']['class'])) !== FALSE) {
        unset($form['actions']['delete']['#attributes']['class'][$key]);
      }
    }

    $form['actions']['delete']['#attributes']['class'][] = 'delete';
    $form['actions']['delete']['#attributes']['class'][] = 'right';
  }
}


/**
 * Implements hook_preprocess_input__submit().
 */
function gent_base_preprocess_input__submit(&$variables) {
  if (isset($variables['element']['#submit'][0]) && $variables['element']['#submit'][0] == 'file_managed_file_submit') {
    $variables['attributes']['class'][] = 'button--inline';
  }
}

/**
 * Implements hook_preprocess_container().
 */
function gent_base_preprocess_container(&$variables) {
  if (isset($variables['attributes']['class'][0]) && $variables['attributes']['class'][0] === "filter-help") {
    unset($variables['children']);
  }
}

/**
 * Implements hook_preprocess_dg_auth_block().
 */
function gent_base_preprocess_dg_auth_block(&$variables) {
  $variables['login_link']['#title'] = [
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#attributes' => [
      'class' => [
        'login-link',
      ],
    ],
    '#value' => $variables['login_link']['#title'] . ' <i class="icon-user"></i>',
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for the item_list__steps theme function.
 * Use item_list__steps theme function to render steps for ex. form steps.
 *
 * Every item in #items should be an array that contains:
 * - #markup = the item value
 * - #active = if the item is active
 * - #completed = if the item is completed
 */
function gent_base_preprocess_item_list__steps(&$variables) {
  $items = [];
  $count = 1;
  foreach ($variables['items'] as &$item) {
    if (!is_array($item['value'])) {
      $step['value'] = [
        '#markup' => $item['value'],
      ];
    }

    $item['attributes']['class'] = 'progress';
    if (!empty($item['value']['#active'])) {
      $item['attributes']['class'][] = 'progress-active';
    }
    if (!empty($item['value']['#completed'])) {
      $item['attributes']['class'][] = 'progress-previous';
    }

    $items[$count] = $item;
    $count++;
  }

  $variables['items'] = $items;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for the item_list__attachments theme function.
 * Use item_list__attachments theme function to render
 * a list of attachments with additional file size and type.
 *
 * Every item in #items should be an array that contains:
 * - renderable array = the item value
 * - #size = the size of the attachment
 * - #type = the type of the attachment
 */
function gent_base_preprocess_item_list__attachments(&$variables) {
  foreach ($variables['items'] as &$item) {
    $item += [
      'size' => NULL,
      'type' => NULL,
    ];

    if (is_array($item['value'])) {
      if (!empty($item['value']['#size'])) {
        $item['size'] = $item['value']['#size'];
      }
      if (!empty($item['value']['#type'])) {
        $item['type'] = $item['value']['#type'];
      }
    }

  }

  $variables['attributes']['class'][] = 'no-style';
  $variables['attributes']['class'][] = 'links';
}

/**
* Implements hook_preprocess_HOOK().
*
* Add theming classes to dg_blocks.
*/
function gent_base_preprocess_block(&$variables) {
  switch ($variables['elements']['#plugin_id']) {
    case 'dg_blocks_gentinfo_block':
      if (isset($variables['content']['gent_olark'])) {
        array_push($variables['content']['gent_olark']['#attributes']['class'], 'btn', 'textballoon');
      }
      break;
    case 'dg_blocks_links_block':
      array_push($variables['content']['links']['#attributes']['class'], 'dg-block-links', 'island');
      break;
    case 'dg_blocks_social_media_block':
      $variables['attributes']['class'][] = 'dg-blocks-social';
      break;
    case 'dg_blocks_address_block':
      $variables['attributes']['class'][] = 'dg-block-post-address ';
      break;
    default:
      break;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function gent_base_theme_registry_alter(&$theme_registry) {
  // Add support for the information property on elements.
  $supported_types = ['fieldset', 'form_element'];
  foreach ($supported_types as $supported_type) {
    if (!isset($theme_registry[$supported_type])) {
      continue;
    }

    $theme_registry[$supported_type]['preprocess functions'][] = 'gent_base_preprocess_element_information';
  }
}

/**
 * Preprocess function for elements that support the #information property.
 *
 * @param array $variables
 *   Element variables.
 */
function gent_base_preprocess_element_information(&$variables) {
  $element = &$variables['element'];
  $variables['information'] = NULL;

  if (!empty($element['#information'])) {
    $information_attributes = [];
    if (!empty($element['#id'])) {
      $information_attributes['id'] = $element['#id'] . '--information';
    }

    $variables['information']['attributes'] = new Attribute($information_attributes);
    $variables['information']['content'] = $element['#information'];
  }
}
