<?php

/**
 * @file
 * Functions to support theming in the Gent Base theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\Html;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gent_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Setup system forms to have the "no-style" and "no-optional" styling classes
  // As defined by the Gent styleguide.
  $system_forms = [
    'content_moderation_entity_moderation_form',
  ];

  if (in_array($form_id, $system_forms)) {
    $form['#attributes']['class'][] = 'no-style';
    $form['#attributes']['class'][] = 'no-optional';
  }

  // Remove button classes form delete action.
  if (isset($form['actions']['delete']['#attributes']['class'])) {
    foreach (['button', 'button--danger'] as $class) {
      if (($key = array_search($class, $form['actions']['delete']['#attributes']['class'])) !== FALSE) {
        unset($form['actions']['delete']['#attributes']['class'][$key]);
      }
    }

    $form['actions']['delete']['#attributes']['class'][] = 'delete';
    $form['actions']['delete']['#attributes']['class'][] = 'right';
  }
}

/**
 * Implements hook_preprocess().
 */
function gent_base_preprocess_page(&$variables) {
  $routeMatch = \Drupal::routeMatch();
  $entityTypeManager = \Drupal::entityTypeManager();
  $entity = $routeMatch->getParameter('node');

  if ($entity instanceof NodeInterface) {
    $bundle = $entity->bundle();

    $isViewMode = \Drupal::service('entity_type.manager')->getStorage('entity_view_display')->load('node.' . $bundle . '.hero_image');

    if ($entity->access('view') && $isViewMode !== NULL) {
      $render = $entityTypeManager->getViewBuilder('node');

      $variables['hero_image'] = $render->view($entity, 'hero_image');
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function gent_base_preprocess(&$variables, $hook) {
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_input__submit().
 */
function gent_base_preprocess_input__submit(&$variables) {
  if (isset($variables['element']['#submit'][0]) && $variables['element']['#submit'][0] == 'file_managed_file_submit') {
    $variables['attributes']['class'][] = 'button--inline';
  }
}

/**
 * Implements hook_preprocess_container().
 */
function gent_base_preprocess_container(&$variables) {
  if (isset($variables['attributes']['class'][0]) && $variables['attributes']['class'][0] === "filter-help") {
    unset($variables['children']);
  }
}

/**
 * Implements hook_preprocess_dg_auth_block().
 */
function gent_base_preprocess_dg_auth_block(&$variables) {
  $variables['login_link']['#title'] = [
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#attributes' => [
      'class' => [
        'login-link',
      ],
    ],
    '#value' => $variables['login_link']['#title'] . ' <i class="icon-user"></i>',
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Adds theme settings as variables to html.twig template.
 */
function gent_base_preprocess_html(&$variables) {
  $variables['typekit_id'] = theme_get_setting('typekit_id');
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for the item_list__steps theme function.
 * Use item_list__steps theme function to render steps for ex. form steps.
 *
 * Every item in #items should be an array that contains:
 * - #markup = the item value
 * - #url = optional url for the count and the list value.
 * - #active = if the item is active
 * - #completed = if the item is completed
 */
function gent_base_preprocess_item_list__steps(&$variables) {
  $items = [];
  $count = 1;
  foreach ($variables['items'] as &$item) {
    if (!is_array($item['value'])) {
      $item['value'] = [
        '#markup' => $item['value'],
      ];
    }
    else {
      if (!empty($item['value']['#url'])) {
        $item['url'] = $item['value']['#url'];
      }

      $item['attributes']['class'] = 'progress';
      if (!empty($item['value']['#active'])) {
        $item['attributes']['class'][] = 'progress-active';
      }

      if (!empty($item['value']['#completed'])) {
        $item['attributes']['class'][] = 'progress-previous';
        $item['icon']['#markup'] = '<i class="icon icon-check"></i>';
      }
    }

    $items[$count] = $item;
    $count++;
  }

  $variables['items'] = $items;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for the item_list__attachments theme function.
 * Use item_list__attachments theme function to render
 * a list of attachments with additional file size and type.
 *
 * Every item in #items should be an array that contains:
 * - renderable array = the item value
 * - #size = the size of the attachment
 * - #type = the type of the attachment
 */
function gent_base_preprocess_item_list__attachments(&$variables) {
  foreach ($variables['items'] as &$item) {
    $item += [
      'size' => NULL,
      'type' => NULL,
    ];

    if (is_array($item['value'])) {
      if (!empty($item['value']['#size'])) {
        $item['size'] = $item['value']['#size'];
      }
      if (!empty($item['value']['#type'])) {
        $item['type'] = $item['value']['#type'];
      }
    }

  }

  $variables['attributes']['class'][] = 'no-style';
  $variables['attributes']['class'][] = 'links';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_item_list__dg_auth_block_menu(&$variables) {
  end($variables["items"])['attributes']['class'][] = 'button button-small button-secondary';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add theming classes to dg_blocks.
 */
function gent_base_preprocess_block(&$variables) {
  switch ($variables['elements']['#plugin_id']) {
    case 'dg_blocks_address_block':
      $variables['attributes']['class'][] = 'dg-block-post-address';
      break;

    case 'dg_blocks_links_block':
      $variables['attributes']['class'][] = 'dg-block-disclaimer';
      break;

    default:
      break;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function gent_base_theme_registry_alter(&$theme_registry) {
  // Add support for the information property on elements.
  $supported_types = ['fieldset', 'form_element'];
  foreach ($supported_types as $supported_type) {
    if (!isset($theme_registry[$supported_type])) {
      continue;
    }

    $theme_registry[$supported_type]['preprocess functions'][] = 'gent_base_preprocess_element_information';
  }
}

/**
 * Preprocess function for elements that support the #information property.
 *
 * @param array $variables
 *   Element variables.
 */
function gent_base_preprocess_element_information(array &$variables) {
  $element = &$variables['element'];
  $variables['information'] = NULL;

  if (!empty($element['#information'])) {
    $information_attributes = [];
    if (!empty($element['#id'])) {
      $information_attributes['id'] = $element['#id'] . '--information';
    }

    $variables['information']['attributes'] = new Attribute($information_attributes);
    $variables['information']['content'] = $element['#information'];
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function gent_base_preprocess_form_element(&$variables) {
  $element = &$variables['element'];
  if (!isset($element['#help'])) {
    return;
  }

  $element['#information'] = $element['#help'];
}

/**
 * Implements hook_preprocess_webform_element_help().
 */
function gent_base_preprocess_webform_element_help(&$variables) {
  $variables['help_icon'] = NULL;
}

/**
 * Implements hook_preprocess_fieldset().
 */
function gent_base_preprocess_fieldset(&$variables) {
  if ($variables['element']['#type'] == 'fieldset' && empty($variables['element']['#required'])) {
    $variables['fieldset_optional'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add theming classes to dg_blocks gentinfo.
 */
function gent_base_preprocess_dg_blocks_gentinfo(&$variables) {
  $variables["phone"]["#title"] = t('T: @phone', ['@phone' => $variables["phone"]["#title"]]);
  $variables["phone"]["#attributes"]["class"][] = 'button button-secondary button-call icon-phone';
  $variables["link"]["#attributes"]["class"][] = 'standalone-link';
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function gent_base_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button button-primary';
}

/**
 * Implements hook_preprocess_field().
 */
function gent_base_preprocess_field(&$variables) {
  if ($variables["element"]["#field_name"] == 'field_tags' && count($variables["items"]) > 0) {

    foreach ($variables['items'] as $key => $item) {
      $variables["items"][$key]["content"]["#options"]['attributes']['class'][] = 'tag';
    }
  }

  // Add timeline wrapper.
  if ($variables["element"]["#field_name"] == 'field_paragraphs') {
    $paragraphs = $variables['element']["#items"]->getIterator();

    $isTimeline = FALSE;

    foreach ($paragraphs as $key => $paragraph) {
      $entity = Paragraph::load($paragraph->get('target_id')->getValue());
      if ($entity) {
        $type = $entity->get('type')->getString();

        if ($type === 'timeline_frame') {
          // It's the first timeline frame.
          if ($isTimeline === FALSE) {
            $isTimeline = TRUE;

            $variables['items'][$key]['content']['#prefix'] = '<dl class="timeline accordion">';
          }
        }
        else {
          if ($isTimeline === TRUE) {
            $isTimeline = FALSE;
            $variables['items'][$key - 1]['content']['#suffix'] = '</dl>';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function gent_base_preprocess_faqfield_definition_list_formatter(&$variables) {
  $variables['unique_list_id'] = Html::getUniqueId('faqItem');
}
